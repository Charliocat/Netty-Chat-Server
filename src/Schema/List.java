// automatically generated by the FlatBuffers compiler, do not modify

package Schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class List extends Table {
  public static List getRootAsList(ByteBuffer _bb) { return getRootAsList(_bb, new List()); }
  public static List getRootAsList(ByteBuffer _bb, List obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public List __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String contents(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int contentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createList(FlatBufferBuilder builder,
      int typeOffset,
      int contentsOffset) {
    builder.startObject(2);
    List.addContents(builder, contentsOffset);
    List.addType(builder, typeOffset);
    return List.endList(builder);
  }

  public static void startList(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addContents(FlatBufferBuilder builder, int contentsOffset) { builder.addOffset(1, contentsOffset, 0); }
  public static int createContentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startContentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endList(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // type
    return o;
  }
}

