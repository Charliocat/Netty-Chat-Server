// automatically generated by the FlatBuffers compiler, do not modify

package Schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Game extends Table {
  public static Game getRootAsGame(ByteBuffer _bb) { return getRootAsGame(_bb, new Game()); }
  public static Game getRootAsGame(ByteBuffer _bb, Game obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Game __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte gameData(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int gameDataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer gameDataAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public short bestOf() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public boolean completed() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createGame(FlatBufferBuilder builder,
      byte type,
      int gameDataOffset,
      short bestOf,
      boolean completed) {
    builder.startObject(4);
    Game.addGameData(builder, gameDataOffset);
    Game.addBestOf(builder, bestOf);
    Game.addCompleted(builder, completed);
    Game.addType(builder, type);
    return Game.endGame(builder);
  }

  public static void startGame(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addGameData(FlatBufferBuilder builder, int gameDataOffset) { builder.addOffset(1, gameDataOffset, 0); }
  public static int createGameDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startGameDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addBestOf(FlatBufferBuilder builder, short bestOf) { builder.addShort(2, bestOf, 0); }
  public static void addCompleted(FlatBufferBuilder builder, boolean completed) { builder.addBoolean(3, completed, false); }
  public static int endGame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

